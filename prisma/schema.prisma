generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  password       String?
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  sessions       Session[]
  documents      Document[]
  chatSessions   ChatSession[]
  authenticators Authenticator[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Document {
  id           String          @id @default(cuid())
  title        String
  filename     String
  filepath     String
  mimeType     String
  size         Int
  userId       String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatSessions ChatSession[]
  chunks       DocumentChunk[]
}

model ChatSession {
  id         String    @id @default(cuid())
  userId     String
  documentId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  document   Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  messages   Message[]
}

model Message {
  id            String       @id @default(cuid())
  chatSessionId String
  role          String
  content       String
  createdAt     DateTime     @default(now())
  chatSession   ChatSession  @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  annotations   Annotation[]
}

model Annotation {
  id        String   @id @default(cuid())
  messageId String
  page      Int
  x         Float
  y         Float
  width     Float
  height    Float
  type      String
  color     String   @default("#ffff00")
  text      String?
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model DocumentChunk {
  id         String   @id @default(cuid())
  documentId String
  page       Int?
  idx        Int
  start      Int?
  end        Int?
  text       String
  embedding  Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, idx])
}
