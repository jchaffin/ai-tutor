// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  chatSessions  ChatSession[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id           String        @id @default(cuid())
  title        String
  filename     String
  filepath     String
  mimeType     String
  size         Int
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatSessions ChatSession[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model ChatSession {
  id         String    @id @default(cuid())
  userId     String
  documentId String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  document   Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  messages   Message[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Message {
  id            String       @id @default(cuid())
  chatSessionId String
  chatSession   ChatSession  @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  role          String       // 'user' or 'assistant'
  content       String
  annotations   Annotation[]
  createdAt     DateTime     @default(now())
}

model Annotation {
  id        String  @id @default(cuid())
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  page      Int
  x         Float
  y         Float
  width     Float
  height    Float
  type      String  // 'highlight', 'circle', 'rectangle'
  color     String  @default("#ffff00")
  text      String?
  createdAt DateTime @default(now())
}